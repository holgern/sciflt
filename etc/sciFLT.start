// Copyright (C) 2012 - Michael Baudin
// Copyright (C) 2010 - DIGITEO - Michael Baudin
//
// This file must be used under the terms of the CeCILL.
// This source file is licensed as described in the file COPYING, which
// you should have received as part of this distribution.  The terms
// are also available at
// http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt

function sciFLTlib = sciFLT_load()

    TOOLBOX_NAME = "sciFLT"
    TOOLBOX_TITLE = "Fuzzy Toolbox"

    mprintf("Start %s 0.5\n",TOOLBOX_TITLE);

    // check minimal version (xcosPal required)
    // =============================================================================
    if ~isdef('xcosPal') then
        // and xcos features required
        error(gettext('Scilab 5.3.2 or more is required.'));
    end

    // =============================================================================
    etc_tlbx  = get_absolute_file_path(TOOLBOX_NAME+".start");
    etc_tlbx  = getshortpathname(etc_tlbx);
    root_tlbx = strncpy( etc_tlbx, length(etc_tlbx)-length("\etc\") );

    //Load  functions library
    // =============================================================================

    mprintf("\tLoad macros\n");
    pathmacros = pathconvert( root_tlbx ) + "macros" + filesep();
    sciFLTlib  = lib(pathmacros);
    //exec(pathmacros + 'editfls_viewrule.sci');
    clear pathmacros;

    // load shared library
    // =============================================================================
    if ( %t ) then
        mprintf("\tLoad shared library\n");
        ilib_verbose(0);
        //exec(pathconvert(root_tlbx+"/src/c_scilab/loader.sce",%f));
        //pause
        exec(pathconvert(root_tlbx+"/src/c_xcos/loader.sce",%f));
        //exec(pathconvert(root_tlbx+"/src/fortran/loader.sce",%f));
    end
    // load gateways
    // =============================================================================

    if ( %t ) then
        mprintf("\tLoad gateways\n");
        ilib_verbose(0);
        exec( pathconvert(root_tlbx+"/sci_gateway/loader_gateway.sce",%f));
    end

    // load xcos libraries
    // =============================================================================
    loadXcosLibs();

    // Load palette
    // =============================================================================
    // Add blocks to the Xcos palette
    // =============================================================================
    mprintf("\tLoad palette\n");
    pal = xcosPal(TOOLBOX_NAME);

    h5Files = gsort(ls(root_tlbx + "/images/h5/*.sod"));
    gifFiles = gsort(ls(root_tlbx + "/images/gif/*." + ["png" "jpg" "gif"]));
    svgFiles = gsort(ls(root_tlbx + "/images/svg/*." + ["svg" "png" "jpg" "gif"]));

    for i=1:size(h5Files, "*")
        pal = xcosPalAddBlock(pal, h5Files(i), gifFiles(i), svgFiles(i));
    end

    if ~xcosPalAdd(pal) then   //,[TOOLBOX_NAME,"Blocks"]) then
        error(msprintf(gettext("%s: Unable to export %s.\n"), "sciFLT.start", "pal"));
    end



    //Set TCL
    // =============================================================================

    if (getos() ~= "Darwin") then
        TCL_SetVar("sciFLTpath", pathconvert( root_tlbx ));
        TCL_SetVar("sciFLTpath_temp",strsubst(TMPDIR,"\","/"));
        TCL_EvalFile(pathconvert( root_tlbx )+"gui/plotsurf.tcl");
        TCL_EvalFile(pathconvert( root_tlbx )+"gui/demos_examples.tcl");
        TCL_EvalFile(pathconvert( root_tlbx )+"gui/scicos_param.tcl");
        TCL_EvalFile(pathconvert( root_tlbx )+"gui/flteditor.tcl");
        TCL_EvalFile(pathconvert( root_tlbx )+"gui/fuzzy_editor.tcl");
    else
        try
            TCL_SetVar("sciFLTpath", pathconvert( root_tlbx ));
            TCL_SetVar("sciFLTpath_temp",strsubst(TMPDIR,"\","/"));
            TCL_EvalFile(pathconvert( root_tlbx )+"gui/plotsurf.tcl");
            TCL_EvalFile(pathconvert( root_tlbx )+"gui/demos_examples.tcl");
            TCL_EvalFile(pathconvert( root_tlbx )+"gui/scicos_param.tcl");
            TCL_EvalFile(pathconvert( root_tlbx )+"gui/flteditor.tcl");
            TCL_EvalFile(pathconvert( root_tlbx )+"gui/fuzzy_editor.tcl");
        catch
            disp("The Scilab version on this Mac does not support TCL/TK, sciFLT loaded with less GUI supports.")
        end

    end

    //TCL_EvalStr('cd '+pathconvert( root_tlbx )+"gui");
    //TCL_EvalStr('source flteditor.tcl');
    //TCL_EvalStr('fltEditInit '+pathconvert( root_tlbx )+"gui");

    //TCL_EvalStr('fltEdit');

    // Load and add help chapter
    // =============================================================================

    if ( %t ) then
        if or(getscilabmode() == ["NW";"STD"]) then
            mprintf("\tLoad help\n");
            path_addchapter = pathconvert(root_tlbx+"/jar");
            if ( isdir(path_addchapter) <> [] ) then
                add_help_chapter(TOOLBOX_TITLE, path_addchapter, %F);
            end
        end
    end

    // add demos
    // =============================================================================

    if ( %t ) then
        if or(getscilabmode() == ["NW";"STD"]) then
            mprintf("\tLoad demos\n");
            demoscript = TOOLBOX_NAME + ".dem.gateway.sce"
            pathdemos = pathconvert(fullfile(root_tlbx,"demos",demoscript),%f,%t);
            add_demo(TOOLBOX_TITLE,pathdemos);
        end
    end


    // ====================================================================
    // A Welcome message.

    //mprintf("\tType ""help hypt_overview"" for quick start.\n");
    if (getos() ~= "Darwin") then
        mprintf("\tType ""sciFLTdemo"" to see demos and examples..\n");
    else
        mprintf("\tNotes: GUI with tcl/tk is not available for MacOS..\n");
    end
    
endfunction 

if ( isdef("sciFLTlib") ) then
    warning("	Library is already loaded (""ulink(); clear sciFLTlib;"" to unload.)");
    return;
end

sciFLTlib = sciFLT_load ();
clear sciFLT_load;

